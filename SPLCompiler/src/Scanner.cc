#line 2 "./src/Scanner.cc"

#line 4 "./src/Scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 82
#define YY_END_OF_BUFFER 83
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[726] =
    {   0,
        0,    0,   83,   81,   79,   80,   71,   81,   52,   53,
       61,   59,   57,   60,   56,   62,   76,   58,   73,   66,
       67,   64,   74,   74,   74,   54,   55,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   79,    0,   78,   76,   72,
        0,    0,   70,   65,   68,   63,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,    7,   74,
       74,   74,   74,   74,   74,   14,   15,   74,   74,   74,
       74,   18,   19,   74,   74,   74,   74,   74,   74,   74,
       74,   27,   74,   74,   74,   74,   74,   74,   74,    0,

       77,   75,    0,   75,   71,   69,   36,    1,   74,   74,
       74,   74,   74,   37,   74,    6,   74,   74,   10,   74,
       11,   74,   74,   74,   74,   16,   17,   38,   39,   74,
       74,   74,   74,   74,   74,   25,   41,   74,   74,   74,
       74,   74,   74,   30,   74,   74,   74,    0,   78,   74,
       74,   74,    4,   47,   74,   74,    9,   74,   74,   13,
       74,   74,   74,   40,   74,   74,   51,   49,   74,   74,
       42,   74,   43,   26,   35,   28,   74,   74,   32,   74,
        0,   78,    2,    3,   74,    5,   74,   33,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   29,   31,   44,

        0,   78,   74,    8,   74,   74,   34,   20,   74,   74,
       23,   24,   50,   74,    0,   78,   46,   74,   48,   74,
       22,   45,    0,   78,   12,   74,    0,   78,   21,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,

       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,

       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,

       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,

       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,

       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
       78,    0,   78,   78,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    4,    1,    5,    6,
        7,    8,    9,   10,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,   16,   17,
       18,   19,    1,    1,   20,   20,   20,   21,   20,   20,
       20,   20,   20,   20,   20,   20,   22,   23,   24,   20,
       20,   20,   20,   25,   20,   20,   20,   20,   20,   20,
       26,    1,   27,    1,   28,    1,   29,   30,   31,   32,

       33,   34,   35,   36,   37,   20,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   20,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[53] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3
    } ;

static const flex_int16_t yy_base[982] =
    {   0,
        0,    0, 1250, 1251, 1247, 1251, 1251, 1243, 1251, 1251,
     1251, 1251, 1251, 1233, 1234, 1251,   41, 1227, 1251,   38,
     1251, 1226,    0, 1219, 1218, 1251, 1251,   24,   25,   30,
       26,   21,   35, 1199,   37,   44, 1198,   47,   46, 1206,
       49,   53, 1197, 1208,   63, 1234, 1230, 1229,   73, 1251,
     1219,   90, 1251, 1251, 1251, 1251,    0, 1211, 1206, 1184,
     1197, 1183, 1192, 1184, 1179,   65, 1183, 1174, 1172, 1175,
     1188, 1180, 1173, 1176, 1169,    0, 1168, 1163, 1181, 1165,
     1179,    0, 1178, 1178,   28,   59, 1161, 1162, 1161, 1174,
     1171,    0, 1155, 1159, 1154, 1155, 1162, 1151, 1160, 1191,

     1190, 1180, 1179, 1178,    0,    0,    0,    0, 1162, 1153,
     1150, 1155, 1142,    0, 1140,    0, 1144, 1151,    0, 1137,
        0, 1151, 1139, 1147, 1142,    0,    0,    0,    0, 1140,
     1145,   45,   75, 1134, 1142,    0, 1127, 1136, 1141, 1130,
     1137, 1136, 1131,    0, 1128, 1130, 1118, 1159, 1158, 1110,
     1120, 1127,    0,    0, 1112, 1111,    0, 1124, 1109,    0,
     1120, 1113, 1120,    0, 1119, 1106,    0,    0, 1105, 1120,
        0, 1107,    0,    0,    0,    0, 1108, 1113,    0, 1112,
     1139, 1138,    0,    0, 1113,    0, 1099,    0, 1103, 1106,
     1091, 1105, 1104, 1106, 1102, 1086, 1097,    0,    0, 1092,

     1125, 1124, 1087,    0, 1085, 1081,    0,    0, 1077, 1084,
        0,    0,    0, 1082, 1117, 1116,    0, 1079,    0, 1074,
        0,    0, 1113, 1112,    0, 1083, 1110, 1109,    0, 1108,
     1107, 1106, 1105, 1104, 1103, 1102, 1101, 1100, 1099, 1098,
     1097, 1096, 1095, 1094, 1093, 1092, 1091, 1090, 1089, 1088,
     1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079, 1078,
     1077, 1076, 1075, 1074, 1073, 1072, 1071, 1070, 1069, 1068,
     1067, 1066, 1065, 1064, 1063, 1062, 1061, 1060, 1059, 1058,
     1057, 1056, 1055, 1054, 1053, 1052, 1051, 1050, 1049, 1048,
     1047, 1046, 1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038,

     1037, 1036, 1035, 1034, 1033, 1032, 1031, 1030, 1029, 1028,
     1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018,
     1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010, 1009, 1008,
     1007, 1006, 1005, 1004, 1003, 1002, 1001,  999,  996,  993,
      990,  987,  984,  981,  978,  975,  972,  969,  966,  963,
      960,  957,  954,  951,  948,  945,  942,  939,  936,  933,
      930,  927,  924,  921,  918,  915,  912,  909,  906,  903,
      900,  897,  894,  891,  888,  885,  882,  879,  876,  873,
      870,  867,  864,  861,  858,  855,  852,  849,  846,  843,
      840,  837,  834,  831,  828,  825,  822,  819,  816,  813,

      810,  807,  804,  801,  798,  795,  792,  789,  786,  783,
      780,  777,  774,  771,  768,  765,  762,  759,  756,  753,
      750,  747,  744,  741,  738,  735,  732,  729,  726,  723,
      720,  717,  714,  711,  708,  705,  702,  699,  696,  693,
      690,  687,  684,  681,  678,  675,  672,  669,  666,  663,
      660,  657,  654,  651,  648,  645,  642,  639,  636,  633,
      630,  627,  624,  621,  618,  615,  612,  609,  606,  603,
      600,  597,  594,  591,  588,  585,  582,  579,  576,  573,
      570,  567,  564,  561,  558,  555,  552,  549,  546,  543,
      540,  537,  534,  531,  528,  525,  522,  519,  516,  513,

      510,  507,  504,  501,  498,  495,  492,  489,  486,  483,
      480,  477,  474,  471,  468,  465,  462,  459,  456,  453,
      450,  447,  444,  441,  438,  435,  432,  429,  426,  423,
      420,  417,  414,  411,  408,  405,  402,  399,  396,  393,
      390,  387,  384,  381,  378,  375,  372,  369,  366,  363,
      360,  357,  354,  351,  348,  345,  342,  339,  336,  333,
      330,  327,  324,  321,  318,  315,  312,  309,  306,  303,
      300,  297,  294,  291,  288,  285,  282,  279,  276,  273,
      270,  267,  264,  261,  258,  255,  252,  249,  246,  243,
      240,   79,   98,  104,  106,  107,  108,  110,  111,  112,

      113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
      123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
      133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
      143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
      153,  154,  155,  156,  157,  158,  159,  160,  161,  162,
      163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
      173,  174,  175,  176,  177,  178,  179,  180,  181,  182,
      183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
      193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
      203,  204,  205,  206,  207,  208,  209,  210,  211,  212,

      213,  214,  215,  216,  217,  218,  219,  220,  221,  222,
      223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
      233,  234,  235, 1251, 1251,  240,  239,  243,  246,  249,
      252,  255,  258,  261,  264,  267,  270,  273,  276,  279,
      282,  285,  288,  291,  294,  297,  300,  303,  306,  309,
      312,  315,  318,  321,  324,  327,  330,  333,  336,  339,
      342,  345,  348,  351,  354,  357,  360,  363,  366,  369,
      372,  375,  378,  381,  384,  387,  390,  393,  396,  399,
      402,  405,  408,  411,  414,  417,  420,  423,  426,  429,
      432,  435,  438,  441,  444,  447,  450,  453,  456,  459,

      462,  465,  468,  471,  474,  477,  480,  483,  486,  489,
      492,  495,  498,  501,  504,  507,  510,  513,  516,  519,
      522,  525,  528,  531,  534,  537,  540,  543,  546,  549,
      552,  555,  558,  561,  564,  567,  570,  573,  576,  579,
      582,  585,  588,  591,  594,  597,  600,  603,  606,  609,
      612,  615,  618,  621,  624,  627,  630,  633,  636,  639,
      642,  645,  648,  651,  654,  657,  660,  663,  666,  669,
      672,  675,  678,  681,  684,  687,  690,  693,  696,  699,
      702,  705,  708,  711,  714,  717,  720,  723,  726,  729,
      732,  735,  738,  741,  744,  747,  750,  753,  756,  759,

      762,  765,  768,  771,  774,  777,  780,  783,  786,  789,
      792,  795,  798,  801,  804,  807,  810,  813,  816,  819,
      822,  825,  828,  831,  834,  837,  840,  843,  846,  849,
      852,  855,  858,  861,  864,  867,  870,  873,  876,  879,
      882,  885,  888,  891,  894,  897,  900,  903,  906,  909,
      912,  915,  918,  921,  924,  927,  930,  933,  936,  939,
      942,  945,  948,  951,  954,  957,  960,  963,  966,  969,
      972,  975,  978,  981,  984,  987,  990,  993,  996,  999,
     1002
    } ;

static const flex_int16_t yy_def[982] =
    {   0,
      725,    1,  725,  725,  725,  725,  725,  726,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  727,  727,  727,  725,  725,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  725,  728,  728,  725,  725,
      725,  725,  725,  725,  725,  725,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  729,

      729,  725,  725,  725,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  730,  730,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      731,  731,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      732,  732,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  733,  733,  727,  727,  727,  727,
      727,  727,  734,  734,  727,  727,  735,  735,  727,  736,
      736,  737,  737,  738,  738,  739,  739,  740,  740,  741,
      741,  742,  742,  743,  743,  744,  744,  745,  745,  746,
      746,  747,  747,  748,  748,  749,  749,  750,  750,  751,
      751,  752,  752,  753,  753,  754,  754,  755,  755,  756,
      756,  757,  757,  758,  758,  759,  759,  760,  760,  761,
      761,  762,  762,  763,  763,  764,  764,  765,  765,  766,
      766,  767,  767,  768,  768,  769,  769,  770,  770,  771,

      771,  772,  772,  773,  773,  774,  774,  775,  775,  776,
      776,  777,  777,  778,  778,  779,  779,  780,  780,  781,
      781,  782,  782,  783,  783,  784,  784,  785,  785,  786,
      786,  787,  787,  788,  788,  789,  789,  790,  790,  791,
      791,  792,  792,  793,  793,  794,  794,  795,  795,  796,
      796,  797,  797,  798,  798,  799,  799,  800,  800,  801,
      801,  802,  802,  803,  803,  804,  804,  805,  805,  806,
      806,  807,  807,  808,  808,  809,  809,  810,  810,  811,
      811,  812,  812,  813,  813,  814,  814,  815,  815,  816,
      816,  817,  817,  818,  818,  819,  819,  820,  820,  821,

      821,  822,  822,  823,  823,  824,  824,  825,  825,  826,
      826,  827,  827,  828,  828,  829,  829,  830,  830,  831,
      831,  832,  832,  833,  833,  834,  834,  835,  835,  836,
      836,  837,  837,  838,  838,  839,  839,  840,  840,  841,
      841,  842,  842,  843,  843,  844,  844,  845,  845,  846,
      846,  847,  847,  848,  848,  849,  849,  850,  850,  851,
      851,  852,  852,  853,  853,  854,  854,  855,  855,  856,
      856,  857,  857,  858,  858,  859,  859,  860,  860,  861,
      861,  862,  862,  863,  863,  864,  864,  865,  865,  866,
      866,  867,  867,  868,  868,  869,  869,  870,  870,  871,

      871,  872,  872,  873,  873,  874,  874,  875,  875,  876,
      876,  877,  877,  878,  878,  879,  879,  880,  880,  881,
      881,  882,  882,  883,  883,  884,  884,  885,  885,  886,
      886,  887,  887,  888,  888,  889,  889,  890,  890,  891,
      891,  892,  892,  893,  893,  894,  894,  895,  895,  896,
      896,  897,  897,  898,  898,  899,  899,  900,  900,  901,
      901,  902,  902,  903,  903,  904,  904,  905,  905,  906,
      906,  907,  907,  908,  908,  909,  909,  910,  910,  911,
      911,  912,  912,  913,  913,  914,  914,  915,  915,  916,
      916,  917,  917,  918,  918,  919,  919,  920,  920,  921,

      921,  922,  922,  923,  923,  924,  924,  925,  925,  926,
      926,  927,  927,  928,  928,  929,  929,  930,  930,  931,
      931,  932,  932,  933,  933,  934,  934,  935,  935,  936,
      936,  937,  937,  938,  938,  939,  939,  940,  940,  941,
      941,  942,  942,  943,  943,  944,  944,  945,  945,  946,
      946,  947,  947,  948,  948,  949,  949,  950,  950,  951,
      951,  952,  952,  953,  953,  954,  954,  955,  955,  956,
      956,  957,  957,  958,  958,  959,  959,  960,  960,  961,
      961,  962,  962,  963,  963,  964,  964,  965,  965,  966,
      966,  967,  967,  968,  968,  969,  969,  970,  970,  971,

      971,  972,  972,  973,  973,  974,  974,  975,  975,  976,
      976,  977,  977,  978,  978,  979,  979,  980,  980,  981,
      981,  725,  725,  725,    0,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725
    } ;

static const flex_int16_t yy_nxt[1304] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       23,   24,   25,   23,   23,   26,   27,    4,   28,   29,
       30,   31,   32,   33,   34,   23,   35,   23,   23,   36,
       37,   38,   39,   23,   40,   41,   42,   43,   44,   45,
       23,   23,   51,   60,   49,   54,   55,   63,   65,   70,
      131,   71,   68,   72,   61,   66,   64,   69,   62,  132,
       76,   67,   78,   52,   84,  165,   73,   77,   81,  166,
       82,   87,   74,  595,   51,   79,   49,  133,   91,  134,
       85,   83,   88,  113,   92,   89,   90,   93,   97,   98,

      103,  135,  595,  104,   94,   52,  167,   99,  597,  114,
      597,  599,  599,  168,  601,  601,  603,  603,  605,  605,
      607,  607,  609,  609,  611,  611,  613,  613,  615,  615,
      617,  617,  619,  619,  621,  621,  623,  623,  625,  625,
      627,  627,  629,  629,  631,  631,  633,  633,  635,  635,
      637,  637,  639,  639,  641,  641,  643,  643,  645,  645,
      647,  647,  649,  649,  651,  651,  653,  653,  655,  655,
      657,  657,  659,  659,  661,  661,  663,  663,  665,  665,
      667,  667,  669,  669,  671,  671,  673,  673,  675,  675,
      677,  677,  679,  679,  681,  681,  683,  683,  685,  685,

      687,  687,  689,  689,  691,  691,  693,  693,  695,  695,
      697,  697,  699,  699,  701,  701,  703,  703,  705,  705,
      707,  707,  709,  709,  711,  711,  713,  713,  715,  715,
      717,  717,  719,  719,  721,  721,  723,  723,  724,  724,
       47,   57,   47,  100,  593,  100,  148,  593,  148,  181,
      591,  181,  201,  591,  201,  215,  589,  215,  223,  589,
      223,  227,  587,  227,  230,  587,  230,  232,  585,  232,
      234,  585,  234,  236,  583,  236,  238,  583,  238,  240,
      581,  240,  242,  581,  242,  244,  579,  244,  246,  579,
      246,  248,  577,  248,  250,  577,  250,  252,  575,  252,

      254,  575,  254,  256,  573,  256,  258,  573,  258,  260,
      571,  260,  262,  571,  262,  264,  569,  264,  266,  569,
      266,  268,  567,  268,  270,  567,  270,  272,  565,  272,
      274,  565,  274,  276,  563,  276,  278,  563,  278,  280,
      561,  280,  282,  561,  282,  284,  559,  284,  286,  559,
      286,  288,  557,  288,  290,  557,  290,  292,  555,  292,
      294,  555,  294,  296,  553,  296,  298,  553,  298,  300,
      551,  300,  302,  551,  302,  304,  549,  304,  306,  549,
      306,  308,  547,  308,  310,  547,  310,  312,  545,  312,
      314,  545,  314,  316,  543,  316,  318,  543,  318,  320,

      541,  320,  322,  541,  322,  324,  539,  324,  326,  539,
      326,  328,  537,  328,  330,  537,  330,  332,  535,  332,
      334,  535,  334,  336,  533,  336,  338,  533,  338,  340,
      531,  340,  342,  531,  342,  344,  529,  344,  346,  529,
      346,  348,  527,  348,  350,  527,  350,  352,  525,  352,
      354,  525,  354,  356,  523,  356,  358,  523,  358,  360,
      521,  360,  362,  521,  362,  364,  519,  364,  366,  519,
      366,  368,  517,  368,  370,  517,  370,  372,  515,  372,
      374,  515,  374,  376,  513,  376,  378,  513,  378,  380,
      511,  380,  382,  511,  382,  384,  509,  384,  386,  509,

      386,  388,  507,  388,  390,  507,  390,  392,  505,  392,
      394,  505,  394,  396,  503,  396,  398,  503,  398,  400,
      501,  400,  402,  501,  402,  404,  499,  404,  406,  499,
      406,  408,  497,  408,  410,  497,  410,  412,  495,  412,
      414,  495,  414,  416,  493,  416,  418,  493,  418,  420,
      491,  420,  422,  491,  422,  424,  489,  424,  426,  489,
      426,  428,  487,  428,  430,  487,  430,  432,  485,  432,
      434,  485,  434,  436,  483,  436,  438,  483,  438,  440,
      481,  440,  442,  481,  442,  444,  479,  444,  446,  479,
      446,  448,  477,  448,  450,  477,  450,  452,  475,  452,

      454,  475,  454,  456,  473,  456,  458,  473,  458,  460,
      471,  460,  462,  471,  462,  464,  469,  464,  466,  469,
      466,  468,  467,  468,  470,  467,  470,  472,  465,  472,
      474,  465,  474,  476,  463,  476,  478,  463,  478,  480,
      461,  480,  482,  461,  482,  484,  459,  484,  486,  459,
      486,  488,  457,  488,  490,  457,  490,  492,  455,  492,
      494,  455,  494,  496,  453,  496,  498,  453,  498,  500,
      451,  500,  502,  451,  502,  504,  449,  504,  506,  449,
      506,  508,  447,  508,  510,  447,  510,  512,  445,  512,
      514,  445,  514,  516,  443,  516,  518,  443,  518,  520,

      441,  520,  522,  441,  522,  524,  439,  524,  526,  439,
      526,  528,  437,  528,  530,  437,  530,  532,  435,  532,
      534,  435,  534,  536,  433,  536,  538,  433,  538,  540,
      431,  540,  542,  431,  542,  544,  429,  544,  546,  429,
      546,  548,  427,  548,  550,  427,  550,  552,  425,  552,
      554,  425,  554,  556,  423,  556,  558,  423,  558,  560,
      421,  560,  562,  421,  562,  564,  419,  564,  566,  419,
      566,  568,  417,  568,  570,  417,  570,  572,  415,  572,
      574,  415,  574,  576,  413,  576,  578,  413,  578,  580,
      411,  580,  582,  411,  582,  584,  409,  584,  586,  409,

      586,  588,  407,  588,  590,  407,  590,  592,  405,  592,
      594,  405,  594,  596,  403,  596,  598,  403,  598,  600,
      401,  600,  602,  401,  602,  604,  399,  604,  606,  399,
      606,  608,  397,  608,  610,  397,  610,  612,  395,  612,
      614,  395,  614,  616,  393,  616,  618,  393,  618,  620,
      391,  620,  622,  391,  622,  624,  389,  624,  626,  389,
      626,  628,  387,  628,  630,  387,  630,  632,  385,  632,
      634,  385,  634,  636,  383,  636,  638,  383,  638,  640,
      381,  640,  642,  381,  642,  644,  379,  644,  646,  379,
      646,  648,  377,  648,  650,  377,  650,  652,  375,  652,

      654,  375,  654,  656,  373,  656,  658,  373,  658,  660,
      371,  660,  662,  371,  662,  664,  369,  664,  666,  369,
      666,  668,  367,  668,  670,  367,  670,  672,  365,  672,
      674,  365,  674,  676,  363,  676,  678,  363,  678,  680,
      361,  680,  682,  361,  682,  684,  359,  684,  686,  359,
      686,  688,  357,  688,  690,  357,  690,  692,  355,  692,
      694,  355,  694,  696,  353,  696,  698,  353,  698,  700,
      351,  700,  702,  351,  702,  704,  349,  704,  706,  349,
      706,  708,  347,  708,  710,  347,  710,  712,  345,  712,
      714,  345,  714,  716,  343,  716,  718,  343,  718,  720,

      341,  720,  722,  341,  722,  339,  339,  337,  337,  335,
      335,  333,  333,  331,  331,  329,  329,  327,  327,  325,
      325,  323,  323,  321,  321,  319,  319,  317,  317,  315,
      315,  313,  313,  311,  311,  309,  309,  307,  307,  305,
      305,  303,  303,  301,  301,  299,  299,  297,  297,  295,
      295,  293,  293,  291,  291,  289,  289,  287,  287,  285,
      285,  283,  283,  281,  281,  279,  279,  277,  277,  275,
      275,  273,  273,  271,  271,  269,  269,  267,  267,  265,
      265,  263,  263,  261,  261,  259,  259,  257,  257,  255,
      255,  253,  253,  251,  251,  249,  249,  247,  247,  245,

      245,  243,  243,  241,  241,  239,  239,  237,  237,  235,
      235,  233,  233,  231,  231,  229,  228,  228,  226,  225,
      224,  224,  222,  221,  220,  219,  218,  217,  216,  216,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  205,
      204,  203,  202,  202,  200,  199,  198,  197,  196,  195,
      194,  193,  192,  191,  190,  189,  188,  187,  186,  185,
      184,  183,  182,  182,  180,  179,  178,  177,  176,  175,
      174,  173,  172,  171,  170,  169,  164,  163,  162,  161,
      160,  159,  158,  157,  156,  155,  154,  153,  152,  151,
      150,  104,  104,  102,  149,  149,  147,  146,  145,  144,

      143,  142,  141,  140,  139,  138,  137,  136,  130,  129,
      128,  127,  126,  125,  124,  123,  122,  121,  120,  119,
      118,  117,  116,  115,  112,  111,  110,  109,  108,  107,
      106,  105,  102,  101,  101,   46,   96,   95,   86,   80,
       75,   59,   58,   56,   53,   50,   49,   48,   46,  725,
        3,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,

      725,  725,  725
    } ;

static const flex_int16_t yy_chk[1304] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   17,   28,   17,   20,   20,   29,   30,   32,
       85,   32,   31,   33,   28,   30,   29,   31,   28,   85,
       35,   30,   36,   17,   39,  132,   33,   35,   38,  132,
       38,   41,   33,  592,   49,   36,   49,   86,   42,   86,
       39,   38,   41,   66,   42,   41,   41,   42,   45,   45,

       52,   86,  593,   52,   42,   49,  133,   45,  594,   66,
      595,  596,  597,  133,  598,  599,  600,  601,  602,  603,
      604,  605,  606,  607,  608,  609,  610,  611,  612,  613,
      614,  615,  616,  617,  618,  619,  620,  621,  622,  623,
      624,  625,  626,  627,  628,  629,  630,  631,  632,  633,
      634,  635,  636,  637,  638,  639,  640,  641,  642,  643,
      644,  645,  646,  647,  648,  649,  650,  651,  652,  653,
      654,  655,  656,  657,  658,  659,  660,  661,  662,  663,
      664,  665,  666,  667,  668,  669,  670,  671,  672,  673,
      674,  675,  676,  677,  678,  679,  680,  681,  682,  683,

      684,  685,  686,  687,  688,  689,  690,  691,  692,  693,
      694,  695,  696,  697,  698,  699,  700,  701,  702,  703,
      704,  705,  706,  707,  708,  709,  710,  711,  712,  713,
      714,  715,  716,  717,  718,  719,  720,  721,  722,  723,
      726,  727,  726,  728,  591,  728,  729,  590,  729,  730,
      589,  730,  731,  588,  731,  732,  587,  732,  733,  586,
      733,  734,  585,  734,  735,  584,  735,  736,  583,  736,
      737,  582,  737,  738,  581,  738,  739,  580,  739,  740,
      579,  740,  741,  578,  741,  742,  577,  742,  743,  576,
      743,  744,  575,  744,  745,  574,  745,  746,  573,  746,

      747,  572,  747,  748,  571,  748,  749,  570,  749,  750,
      569,  750,  751,  568,  751,  752,  567,  752,  753,  566,
      753,  754,  565,  754,  755,  564,  755,  756,  563,  756,
      757,  562,  757,  758,  561,  758,  759,  560,  759,  760,
      559,  760,  761,  558,  761,  762,  557,  762,  763,  556,
      763,  764,  555,  764,  765,  554,  765,  766,  553,  766,
      767,  552,  767,  768,  551,  768,  769,  550,  769,  770,
      549,  770,  771,  548,  771,  772,  547,  772,  773,  546,
      773,  774,  545,  774,  775,  544,  775,  776,  543,  776,
      777,  542,  777,  778,  541,  778,  779,  540,  779,  780,

      539,  780,  781,  538,  781,  782,  537,  782,  783,  536,
      783,  784,  535,  784,  785,  534,  785,  786,  533,  786,
      787,  532,  787,  788,  531,  788,  789,  530,  789,  790,
      529,  790,  791,  528,  791,  792,  527,  792,  793,  526,
      793,  794,  525,  794,  795,  524,  795,  796,  523,  796,
      797,  522,  797,  798,  521,  798,  799,  520,  799,  800,
      519,  800,  801,  518,  801,  802,  517,  802,  803,  516,
      803,  804,  515,  804,  805,  514,  805,  806,  513,  806,
      807,  512,  807,  808,  511,  808,  809,  510,  809,  810,
      509,  810,  811,  508,  811,  812,  507,  812,  813,  506,

      813,  814,  505,  814,  815,  504,  815,  816,  503,  816,
      817,  502,  817,  818,  501,  818,  819,  500,  819,  820,
      499,  820,  821,  498,  821,  822,  497,  822,  823,  496,
      823,  824,  495,  824,  825,  494,  825,  826,  493,  826,
      827,  492,  827,  828,  491,  828,  829,  490,  829,  830,
      489,  830,  831,  488,  831,  832,  487,  832,  833,  486,
      833,  834,  485,  834,  835,  484,  835,  836,  483,  836,
      837,  482,  837,  838,  481,  838,  839,  480,  839,  840,
      479,  840,  841,  478,  841,  842,  477,  842,  843,  476,
      843,  844,  475,  844,  845,  474,  845,  846,  473,  846,

      847,  472,  847,  848,  471,  848,  849,  470,  849,  850,
      469,  850,  851,  468,  851,  852,  467,  852,  853,  466,
      853,  854,  465,  854,  855,  464,  855,  856,  463,  856,
      857,  462,  857,  858,  461,  858,  859,  460,  859,  860,
      459,  860,  861,  458,  861,  862,  457,  862,  863,  456,
      863,  864,  455,  864,  865,  454,  865,  866,  453,  866,
      867,  452,  867,  868,  451,  868,  869,  450,  869,  870,
      449,  870,  871,  448,  871,  872,  447,  872,  873,  446,
      873,  874,  445,  874,  875,  444,  875,  876,  443,  876,
      877,  442,  877,  878,  441,  878,  879,  440,  879,  880,

      439,  880,  881,  438,  881,  882,  437,  882,  883,  436,
      883,  884,  435,  884,  885,  434,  885,  886,  433,  886,
      887,  432,  887,  888,  431,  888,  889,  430,  889,  890,
      429,  890,  891,  428,  891,  892,  427,  892,  893,  426,
      893,  894,  425,  894,  895,  424,  895,  896,  423,  896,
      897,  422,  897,  898,  421,  898,  899,  420,  899,  900,
      419,  900,  901,  418,  901,  902,  417,  902,  903,  416,
      903,  904,  415,  904,  905,  414,  905,  906,  413,  906,
      907,  412,  907,  908,  411,  908,  909,  410,  909,  910,
      409,  910,  911,  408,  911,  912,  407,  912,  913,  406,

      913,  914,  405,  914,  915,  404,  915,  916,  403,  916,
      917,  402,  917,  918,  401,  918,  919,  400,  919,  920,
      399,  920,  921,  398,  921,  922,  397,  922,  923,  396,
      923,  924,  395,  924,  925,  394,  925,  926,  393,  926,
      927,  392,  927,  928,  391,  928,  929,  390,  929,  930,
      389,  930,  931,  388,  931,  932,  387,  932,  933,  386,
      933,  934,  385,  934,  935,  384,  935,  936,  383,  936,
      937,  382,  937,  938,  381,  938,  939,  380,  939,  940,
      379,  940,  941,  378,  941,  942,  377,  942,  943,  376,
      943,  944,  375,  944,  945,  374,  945,  946,  373,  946,

      947,  372,  947,  948,  371,  948,  949,  370,  949,  950,
      369,  950,  951,  368,  951,  952,  367,  952,  953,  366,
      953,  954,  365,  954,  955,  364,  955,  956,  363,  956,
      957,  362,  957,  958,  361,  958,  959,  360,  959,  960,
      359,  960,  961,  358,  961,  962,  357,  962,  963,  356,
      963,  964,  355,  964,  965,  354,  965,  966,  353,  966,
      967,  352,  967,  968,  351,  968,  969,  350,  969,  970,
      349,  970,  971,  348,  971,  972,  347,  972,  973,  346,
      973,  974,  345,  974,  975,  344,  975,  976,  343,  976,
      977,  342,  977,  978,  341,  978,  979,  340,  979,  980,

      339,  980,  981,  338,  981,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  327,  326,  325,  324,  323,
      322,  321,  320,  319,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  304,  303,
      302,  301,  300,  299,  298,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  264,  263,
      262,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  251,  250,  249,  248,  247,  246,  245,  244,  243,

      242,  241,  240,  239,  238,  237,  236,  235,  234,  233,
      232,  231,  230,  228,  227,  226,  224,  223,  220,  218,
      216,  215,  214,  210,  209,  206,  205,  203,  202,  201,
      200,  197,  196,  195,  194,  193,  192,  191,  190,  189,
      187,  185,  182,  181,  180,  178,  177,  172,  170,  169,
      166,  165,  163,  162,  161,  159,  158,  156,  155,  152,
      151,  150,  149,  148,  147,  146,  145,  143,  142,  141,
      140,  139,  138,  137,  135,  134,  131,  130,  125,  124,
      123,  122,  120,  118,  117,  115,  113,  112,  111,  110,
      109,  104,  103,  102,  101,  100,   99,   98,   97,   96,

       95,   94,   93,   91,   90,   89,   88,   87,   84,   83,
       81,   80,   79,   78,   77,   75,   74,   73,   72,   71,
       70,   69,   68,   67,   65,   64,   63,   62,   61,   60,
       59,   58,   51,   48,   47,   46,   44,   43,   40,   37,
       34,   25,   24,   22,   18,   15,   14,    8,    5,    3,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,

      725,  725,  725
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "./src/lexer/Scanner.l"
#line 2 "./src/lexer/Scanner.l"
    #include <iostream>
    #include "Parser.hh"
    #include "logger/logger.hh"
    #include "ast/ast.hh"
    int lineno = 1;
    int colno = 1;
#line 1033 "./src/Scanner.cc"
/* keywords */
/* SYS_CON */
/* SYS_FUNCT */
/* SYS_PROC */
/* SYS_TYPE */
/* READ */
/* operator */
/* NAME: ID except keywords and system used tokens */
/* constants */
/* white space */
/* exception */
#line 1045 "./src/Scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 116 "./src/lexer/Scanner.l"



#line 120 "./src/lexer/Scanner.l"
/* keywords */


#line 1270 "./src/Scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 726 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1251 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 123 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_AND;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 128 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_ARRAY;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 133 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_BEGIN;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 138 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_CASE;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 143 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_CONST;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 148 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_DIV;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 153 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_DO;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 158 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_DOWNTO;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 163 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_ELSE;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 168 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_END;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 173 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_FOR;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 178 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_FUNCTION;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 183 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_GOTO;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 188 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_IF;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 193 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_IN;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 198 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_MOD;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 203 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_NOT;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 208 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_OF;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 213 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_OR;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 218 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_PACKED;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 223 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_PROCEDURE;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 228 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_PROGRAM;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 233 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_RECORD;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 238 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_REPEAT;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 243 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_SET;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 248 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_THEN;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 253 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_TO;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 258 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_TYPE;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 263 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_UNTIL;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 268 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_VAR;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 273 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_WHILE;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 278 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return KW_WITH;
}
	YY_BREAK

/* SYS_CON */

case 33:
YY_RULE_SETUP
#line 288 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    LexLogger.print("SYS_CONST:").println(yytext);
    return SYS_FALSE;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 294 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    LexLogger.print("SYS_CONST:").println(yytext);
    return SYS_MAXINT;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 300 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    LexLogger.print("SYS_CONST:").println(yytext);
    return SYS_TRUE;
}
	YY_BREAK

/* SYS_FUNCT */

case 36:
YY_RULE_SETUP
#line 311 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_ABS;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 316 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_CHR;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 321 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_ODD;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 326 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_ORD;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 331 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_PRED;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 336 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_SQR;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 341 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_SQRT;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 346 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_SUCC;
}
	YY_BREAK

/* SYS_PROC */

case 44:
YY_RULE_SETUP
#line 356 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_WRITE;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 361 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_WRITELN;
}
	YY_BREAK

/* SYS_TYPE */

case 46:
YY_RULE_SETUP
#line 371 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_BOOLEAN;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 376 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_CHAR;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 381 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_INTEGER;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 386 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_REAL;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 391 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_STRING;
}
	YY_BREAK

/* READ */

case 51:
YY_RULE_SETUP
#line 401 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return SYS_READ;
}
	YY_BREAK

/* operator */

case 52:
YY_RULE_SETUP
#line 411 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_LP;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 416 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_RP;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 421 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_LB;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 426 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_RB;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 431 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_DOT;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 436 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_COMMA;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 441 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_COLON;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 446 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_PLUS;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 451 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_MINUS;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 456 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_MUL;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 461 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_DIV;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 466 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_GE;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 471 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_GT;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 476 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_LE;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 481 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_LT;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 486 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_EQUAL;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 491 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_UNEQUAL;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 496 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_NOT;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 501 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_ASSIGN;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 506 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_MOD;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 511 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_DOTDOT;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 516 "./src/lexer/Scanner.l"
{
    colno += yyleng;
    return OP_SEMI;
}
	YY_BREAK

/* NAME: ID except keywords and system used tokens */

case 74:
YY_RULE_SETUP
#line 526 "./src/lexer/Scanner.l"
{
   yylval.node_name = new ASTNode_Name(yytext);
    colno += yyleng;
    LexLogger.print("NAME:").println(yytext);
    return NAME;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 533 "./src/lexer/Scanner.l"
{
    yylval.node_const = new ASTNode_ConstReal(atof(yytext));
    colno += yyleng;
    LexLogger.print("REAL:").println(yytext);
    return CONST_REAL;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 540 "./src/lexer/Scanner.l"
{
    yylval.node_const = new ASTNode_ConstInteger(atoi(yytext));
    colno += yyleng;
    LexLogger.print("INTEGER:").println(yytext);
    return CONST_INTEGER;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 547 "./src/lexer/Scanner.l"
{
    yylval.node_const = new ASTNode_ConstCharacter(yytext[1]);
    colno += yyleng;
    LexLogger.print("CHAR:").println(yytext);
    return CONST_CHAR;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 554 "./src/lexer/Scanner.l"
{
    yylval.node_const = new ASTNode_ConstString(yytext);
    colno += yyleng;
    LexLogger.print("STRING:").println(yytext);
    return CONST_STRING;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 561 "./src/lexer/Scanner.l"
{
    colno++;
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 564 "./src/lexer/Scanner.l"
{
    lineno++;
    colno = 1;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 569 "./src/lexer/Scanner.l"
{
    std::cerr << "Unrecognized symbol: \'" << yytext << "\' at line " << lineno << " col " << colno << std::endl;
    LexLogger.print("Unrecognized symbol: \'").print(yytext).print("\' at line ").print(std::to_string(lineno)).print(" col ").println(std::to_string(colno));
    exit(1);
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 576 "./src/lexer/Scanner.l"
ECHO;
	YY_BREAK
#line 2015 "./src/Scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 726 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 726 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 725);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 576 "./src/lexer/Scanner.l"


int yywrap()
{
    return 1;
}
